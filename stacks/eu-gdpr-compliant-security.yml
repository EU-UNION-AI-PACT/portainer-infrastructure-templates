version: '3.8'

# üîí EU-GDPR COMPLIANT SECURITY STACK
# Professional deployment with full compliance, ethics, and human rights protection

services:
  # üîê IDENTITY & ACCESS MANAGEMENT
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5  # Fixed version for security
    container_name: keycloak-eu-compliant
    restart: unless-stopped
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres-keycloak:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD_FILE=/run/secrets/keycloak_db_password
      - KC_HOSTNAME_STRICT=false
      - KC_PROXY=edge
      - KC_FEATURES=token-exchange,admin-fine-grained-authz,declarative-user-profile
      - KC_LOG_LEVEL=INFO
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD_FILE=/run/secrets/keycloak_admin_password
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./security/keycloak/themes:/opt/keycloak/themes
    secrets:
      - keycloak_db_password
      - keycloak_admin_password
    networks:
      - secure_backend
      - dmz
    depends_on:
      - postgres-keycloak
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    user: "1000:1000"
    
  # üîê MULTI-FACTOR AUTHENTICATION
  authelia:
    image: authelia/authelia:4.37.5
    container_name: authelia-mfa
    restart: unless-stopped
    environment:
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_key
      - AUTHELIA_LOG_LEVEL=info
      - AUTHELIA_LOG_FORMAT=json
      - AUTHELIA_TELEMETRY_METRICS_ENABLED=true
    ports:
      - "9091:9091"
    volumes:
      - ./security/authelia:/config:ro
      - authelia_data:/var/lib/authelia
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_key
    networks:
      - secure_backend
      - dmz
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"

  # üîí SECRETS MANAGEMENT
  vault:
    image: vault:1.15.2
    container_name: vault-secrets
    restart: unless-stopped
    environment:
      - VAULT_ADDR=https://0.0.0.0:8200
      - VAULT_API_ADDR=https://vault:8200
      - VAULT_DEV_ROOT_TOKEN_ID=""  # Only for dev, use proper init in production
      - VAULT_LOCAL_CONFIG={"storage":{"file":{"path":"/vault/data"}},"listener":{"tcp":{"address":"0.0.0.0:8200","tls_cert_file":"/vault/config/vault.crt","tls_key_file":"/vault/config/vault.key"}},"ui":true,"api_addr":"https://vault:8200","cluster_addr":"https://vault:8201"}
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./security/vault/config:/vault/config:ro
      - ./security/vault/logs:/vault/logs
    cap_add:
      - IPC_LOCK
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true
    user: "100:1000"

  # üõ°Ô∏è SIEM & SECURITY MONITORING
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: wazuh-siem
    restart: unless-stopped
    environment:
      - WAZUH_MANAGER_ADMIN_USER=wazuh_admin
      - WAZUH_MANAGER_ADMIN_PASSWORD_FILE=/run/secrets/wazuh_admin_password
      - WAZUH_API_BASIC_AUTH_PASSWORD_FILE=/run/secrets/wazuh_api_password
      - WAZUH_CLUSTER_NAME=wazuh-eu-cluster
      - WAZUH_CLUSTER_NODE_NAME=wazuh-manager
      - WAZUH_CLUSTER_NODE_TYPE=master
      - WAZUH_CLUSTER_KEY_FILE=/run/secrets/wazuh_cluster_key
      - WAZUH_REGISTRATION_PASSWORD_FILE=/run/secrets/wazuh_registration_password
    ports:
      - "1514:1514"  # Agents communication
      - "1515:1515"  # Agents enrollment
      - "55000:55000"  # API
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - ./security/wazuh/rules:/var/ossec/etc/rules/local_rules.xml:ro
    secrets:
      - wazuh_admin_password
      - wazuh_api_password
      - wazuh_cluster_key
      - wazuh_registration_password
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true

  # üîç VULNERABILITY SCANNING
  trivy:
    image: aquasec/trivy:0.47.0
    container_name: trivy-scanner
    restart: unless-stopped
    environment:
      - TRIVY_LISTEN=0.0.0.0:4954
      - TRIVY_CACHE_DIR=/root/.cache/trivy
      - TRIVY_DEBUG=false
      - TRIVY_QUIET=false
      - TRIVY_NO_PROGRESS=true
    ports:
      - "4954:4954"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy_cache:/root/.cache/trivy
      - ./security/trivy/reports:/reports
    command: ["server", "--listen", "0.0.0.0:4954"]
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # üìä GDPR-COMPLIANT MONITORING
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus-gdpr
    restart: unless-stopped
    environment:
      - PROMETHEUS_RETENTION_TIME=30d  # GDPR-compliant retention
      - PROMETHEUS_RETENTION_SIZE=10GB
    ports:
      - "9090:9090"
    volumes:
      - ./security/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./security/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # üìà VISUALIZATION (Privacy-enhanced)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana-privacy
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_ANALYTICS_REPORTING_ENABLED=false  # Disable telemetry
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_SECRET_KEY_FILE=/run/secrets/grafana_secret_key
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_LOG_LEVEL=info
      - GF_GDPR_ANONYMIZE_IPS=true
      - GF_GDPR_LOG_USER_ACTIONS=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./security/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./security/grafana/dashboards:/var/lib/grafana/dashboards:ro
    secrets:
      - grafana_admin_password
      - grafana_secret_key
    networks:
      - secure_backend
      - dmz
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # üóÑÔ∏è SECURE DATABASE (PostgreSQL for Keycloak)
  postgres-keycloak:
    image: postgres:15.4-alpine
    container_name: postgres-keycloak-secure
    restart: unless-stopped
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD_FILE=/run/secrets/keycloak_db_password
      - POSTGRES_INITDB_ARGS="--auth-host=md5 --auth-local=md5"
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
      - ./security/postgres/postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
    secrets:
      - keycloak_db_password
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true
    user: "70:70"
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # üîÑ LOG AGGREGATION (GDPR-compliant)
  loki:
    image: grafana/loki:2.9.2
    container_name: loki-gdpr
    restart: unless-stopped
    environment:
      - LOKI_LOG_LEVEL=info
    ports:
      - "3100:3100"
    volumes:
      - ./security/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true
    user: "10001:10001"

  # üìù LOG SHIPPING
  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail-secure
    restart: unless-stopped
    volumes:
      - ./security/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - secure_backend
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # üîí NETWORK INTRUSION DETECTION
  suricata:
    image: jasonish/suricata:6.0.14
    container_name: suricata-ids
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - SYS_NICE
    volumes:
      - ./security/suricata/suricata.yaml:/etc/suricata/suricata.yaml:ro
      - ./security/suricata/rules:/var/lib/suricata/rules:ro
      - suricata_logs:/var/log/suricata
    environment:
      - SURICATA_OPTIONS=-i eth0
    security_opt:
      - no-new-privileges:true

  # üîê CONSENT MANAGEMENT (GDPR)
  consent-manager:
    image: consensu/consent-manager:latest
    container_name: gdpr-consent
    restart: unless-stopped
    environment:
      - GDPR_MODE=strict
      - REQUIRE_EXPLICIT_CONSENT=true
      - COOKIE_CONSENT=required
      - DATA_RETENTION_DAYS=30
      - ANONYMIZE_USER_DATA=true
      - LOG_CONSENT_DECISIONS=true
    ports:
      - "8888:8080"
    volumes:
      - consent_logs:/var/log/consent
      - ./security/consent/config.yml:/etc/consent/config.yml:ro
    networks:
      - dmz
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

# üîí SECURE NETWORKS
networks:
  secure_backend:
    driver: bridge
    internal: true  # No internet access
    driver_opts:
      com.docker.network.bridge.name: "secure_backend"
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  dmz:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "dmz"
    ipam:
      config:
        - subnet: 172.21.0.0/16

# üîê SECURE VOLUMES
volumes:
  keycloak_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/keycloak
  authelia_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/authelia
  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vault
  postgres_keycloak_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres-keycloak
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/loki
  trivy_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/trivy-cache
  consent_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/consent-logs
  suricata_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/suricata-logs
  wazuh_api_configuration:
    driver: local
  wazuh_etc:
    driver: local
  wazuh_logs:
    driver: local
  wazuh_queue:
    driver: local
  wazuh_var_multigroups:
    driver: local
  wazuh_integrations:
    driver: local
  wazuh_active_response:
    driver: local
  wazuh_agentless:
    driver: local
  wazuh_wodles:
    driver: local

# üîí DOCKER SECRETS (for production)
secrets:
  keycloak_db_password:
    external: true
  keycloak_admin_password:
    external: true
  authelia_jwt_secret:
    external: true
  authelia_session_secret:
    external: true
  authelia_storage_key:
    external: true
  grafana_admin_password:
    external: true
  grafana_secret_key:
    external: true
  wazuh_admin_password:
    external: true
  wazuh_api_password:
    external: true
  wazuh_cluster_key:
    external: true
  wazuh_registration_password:
    external: true